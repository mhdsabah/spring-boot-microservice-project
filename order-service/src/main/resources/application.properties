spring.application.name=order-service
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
# when the value is "none", the below will disable the ddl handling for hibernate
# we are doing this because we want to do all the database migration through flyway
spring.jpa.hibernate.ddl-auto=none
# changing port coz, product-service run on 8086(which is defaulst)
server.port=8081
# giving it here because otherwise we have to hardcode the url in the code
inventory.url = http://localhost:8082


# by defining the below path we can access springapi documentation
springdoc.swagger-ui.path=/swagger-ui.html
# for rest api documentation
springdoc.api-docs.path=/api-docs




# ==========================================
# ==========================================
# Adding actuator and resilience4j with circuit breaker
# actuator endpoint
management.health.circuit-breakers.enabled=true
# * for all endpoints
management.endpoints.web.exposure.include=*
# show details of health endpoint
management.endpoint.health.show-details=always

# 
# resilience4j properties
resilience4j.circuitbreaker.configs.inventoryClient.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.inventoryClient.slidingWindowType=COUNT_BASED
# no of requests to activate circuit breaker
resilience4j.circuitbreaker.configs.inventoryClient.slidingWindowSize=10
# if we set is 50, then if 50% of requests are failed then circuit breaker will be activated, ie on 5 
resilience4j.circuitbreaker.configs.inventoryClient.failureRateThreshold=50
#  time on which circuit breaker will be opened to half openstatw
resilience4j.circuitbreaker.configs.inventoryClient.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.inventoryClient.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.inventoryClient.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.inventoryClient.minimum-number-of-calls=5

# resilience4j timeout properties
# if resilience4j is detecting that the request is taking more than 3 seconds then it will fail the request and increment the couter 
# for circuit breaker, if 5 of this happens then circuit breaker will be activated
resilience4j.timelimiter.configs.inventoryClient.timeout-duration=3s


#resilience4j retry properties
resilience4j.retry.configs.inventoryClient.max-attempts=3
resilience4j.retry.configs.inventoryClient.wait-duration=2s

# ==========================================
# ==========================================
# kafka properties
# if kafka is running in clustered env, then we give list
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer