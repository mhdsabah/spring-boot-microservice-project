spring.application.name=api-gateway
server.port=9000
# spring.security.oauth2.client.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-microservice-security-realm
spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8181/realms/spring-microservice-security-realm
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# here we give the urls of product-service,order-service and inventory-service so that openAPI aggregate all urls
# we are providing the urls as set
springdoc.swagger-ui.urls[0].name = Product Service
springdoc.swagger-ui.urls[0].url = /aggregate/product-service/v3/api-docs
springdoc.swagger-ui.urls[1].name = Order Service
springdoc.swagger-ui.urls[1].url = /aggregate/order-service/v3/api-docs
springdoc.swagger-ui.urls[2].name = Inventory Service
springdoc.swagger-ui.urls[2].url = /aggregate/inventory-service/v3/api-docs

# 
# actuator endpoint
management.health.circuit-breakers.enabled=true
# * for all endpoints
management.endpoints.web.exposure.include=*
# show details of health endpoint
management.endpoint.health.show-details=always

# 
# resilience4j properties
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
# no of requests to activate circuit breaker
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
# if we set is 50, then if 50% of requests are failed then circuit breaker will be activated, ie on 5 
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
#  time on which circuit breaker will be opened to half openstatw
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

# resilience4j timeout properties
# if resilience4j is detecting that the request is taking more than 3 seconds then it will fail the request and increment the couter 
# for circuit breaker, if 5 of this happens then circuit breaker will be activated
resilience4j.timelimiter.configs.default.timeout-duration=3s


#resilience4j retry properties
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s